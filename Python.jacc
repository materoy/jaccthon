%class     Python
%interface PythonTokens
%semantic  int : yylval
%get       token
%next      yylex()

%token '+' '-' '*' '/' '(' ')' ';' INTEGER '[' ']'  NEWLINE '*' '!'
AWAIT ASYNC BREAK CONTINUE DEDENT ENDMARKER INDENT MUST NUMBER PASS STRING TYPE_COMMENT RAISE FALSE LAMBDA BECAUSE BEFORE
RETURN FROM IN FINALLY NOT AND OR ASSERT EXCEPT TRUE FALSE NONE
AS BLOCK FOR IF ELSE ELIF FROM IMPORT NAME DEL GLOBAL NONLOCAL DEF
AUGASSIGNADD AUGASSIGNSUBTRACT AUGASSIGNDIVIDE AUGASSIGNMUT AUGASSIGNMOD
DOUBLESTAR WHILE
%left  '+' '-'
%left  '*' '/'

%%

file: '['statements']' ENDMARKER 
    ;
interactive: statement_newline
            ;
eval: expressions NEWLINE'*' ENDMARKER 
    ;
func_type: '(' '['type_expressions']' ')' '-''>' expression NEWLINE'*' ENDMARKER 
            ;
fstring: star_expressions
        ;

type_expressions:
                | ',''.'expression'+' ',' '*' expression DOUBLESTAR expression
                | ',''.'expression'+' ',' '*' expression
                | ',''.'expression'+' ',' DOUBLESTAR expression
                | '*' expression ',' DOUBLESTAR expression
                | '*' expression
                | DOUBLESTAR expression
                | ',''.'expression'+'
                ;

statements: statement'+'
            ;
statement: compound_stmt | simple_stmts
        ;
statement_newline:
                | compound_stmt NEWLINE  
                | simple_stmts
                | NEWLINE 
                | ENDMARKER 
                ;
simple_stmts:
            | simple_stmt '!'';' NEWLINE 
            | ';''.'simple_stmt'+' '['';'']' NEWLINE
            ;

simple_stmt:
            | assignment
            | star_expressions
            | return_stmt
            | import_stmt
            | raise_stmt
            | PASS
            | del_stmt
            | yield_stmt
            | assert_stmt
            | BREAK
            | CONTINUE
            | global_stmt
            | nonlocal_stmt
            ;
compound_stmt:
            | function_def
            | if_stmt
            | class_def
            | with_stmt
            | for_stmt
            | try_stmt
            | while_stmt
            | match_stmt
            ;
assignment:
          | NAME ':' expression ['=' annotated_rhs ]
          | ('(' single_target ')' 
          | single_subscript_attribute_target) ':' expression ['=' annotated_rhs ]
          | (star_targets '=' )+ (yield_expr | star_expressions) !'=' [TYPE_COMMENT]
          | single_target augassign ~ (yield_expr | star_expressions)
          ;
augassign:
          | AUGASSIGNADD 
          | AUGASSIGNSUBTRACT
          | AUGASSIGNMUT
          | AUGASSIGNDIVIDE
          | AUGASSIGNMOD
          ;
global_stmt: GLOBAL ','.NAME'+'
            ;
nonlocal_stmt: NONLOCAL ','.NAME'+'
              ;
yield_stmt: yield_expr
          ;
assert_stmt: ASSERT expression [',' expression ]
            ;
del_stmt:
        | 'del' del_targets &(';' | NEWLINE)
        ;
import_stmt: import_name | import_from
            ;
import_name: 'import' dotted_as_names
            ;
import_from:
            | FROM ('.' | '...')* dotted_name 'import' import_from_targets
            | FROM ('.' | '...')'+' 'import' import_from_targets
            ;
import_from_targets:
                    | '(' import_from_as_names [','] ')' 
                    | import_from_as_names !','
                    | '*'
                    ; 
import_from_as_names:
                    | ','.import_from_as_name'+'
                    ;
import_from_as_name:
                  | NAME [AS NAME ]
                  ;
dotted_as_names:
          | ','.dotted_as_name'+'
          ;
dotted_as_name:
          | dotted_name [AS NAME ]
          ;
dotted_name:
          | dotted_name '.' NAME 
          | NAME
          ;
if_stmt:
          | 'if' named_expression ':' BLOCK elif_stmt
          | 'if' named_expression ':' BLOCK [else_block]
          ;
elif_stmt:
          | 'elif' named_expression ':' BLOCK elif_stmt
          | 'elif' named_expression ':' BLOCK [else_block]
          ;
else_block:
          | ELSE ':' BLOCK
          ;
while_stmt:
          | 'while' named_expression ':' BLOCK [else_block]
          ;
for_stmt:
          | FOR star_targets IN ~ star_expressions ':' [TYPE_COMMENT] BLOCK [else_block
          | ASYNC FOR star_targets IN ~ star_expressions ':' [TYPE_COMMENT] BLOCK [else_block
          ;
with_stmt:
          | 'with' '(' ','.with_item'+' ','? ')' ':' BLOCK
          | 'with' ','.with_item'+' ':' [TYPE_COMMENT] BLOCK
          | ASYNC 'with' '(' ','.with_item'+' ','? ')' ':' BLOCK
          | ASYNC 'with' ','.with_item'+' ':' [TYPE_COMMENT] BLOCK
          ;
with_item:
          | expression AS star_target &(',' | ')' | ':')
          | expression
          ;
try_stmt:
        | 'try' ':' BLOCK finally_block
        | 'try' ':' BLOCK except_block'+' [else_block] [finally_block]
        ;
except_block:
| EXCEPT expression [AS NAME ] ':' BLOCK
| EXCEPT ':' BLOCK
;
finally_block:
| FINALLY ':' BLOCK
;
match_stmt:
| "match" subject_expr ':' NEWLINE INDENT case_block'+' DEDENT 
;
subject_expr:
| star_named_expression ',' star_named_expressions?
| named_expression
;
case_block:
| "case" patterns guard? ':' BLOCK
;
guard: 'if' named_expression
patterns:
| open_sequence_pattern
| pattern
;
pattern:
| as_pattern
| or_pattern
;
as_pattern:
| or_pattern AS pattern_capture_target
;
or_pattern:
| '|'.closed_pattern'+'
;
closed_pattern:
| literal_pattern
| capture_pattern
| wildcard_pattern
| value_pattern
| group_pattern
| sequence_pattern
| mapping_pattern
| class_pattern
;
literal_pattern:
| signed_number !('+' | '-')
| complex_number
| strings
| NONE
| TRUE
| FALSE
;
literal_expr:
| signed_number !('+' | '-')
| complex_number
| strings
| NONE
| TRUE
| FALSE
;
complex_number:
| signed_real_number '+' imaginary_number
| signed_real_number '-' imaginary_number
;
signed_number:
| NUMBER
| '-' NUMBER 
;
signed_real_number:
| real_number
| '-' real_number
;
real_number:
| NUMBER 
;
imaginary_number:
| NUMBER 
;
capture_pattern:
| pattern_capture_target
;
pattern_capture_target:
| !"_" NAME !('.' | '(' | '=')
;
wildcard_pattern:
| "_"
;
value_pattern:
| attr !('.' | '(' | '=')
;
attr:
| name_or_attr '.' NAME 
;
name_or_attr:
| attr
| NAME
;
group_pattern:
| '(' pattern ')' 
;
sequence_pattern:
| '[' maybe_sequence_pattern? ']' 
| '(' open_sequence_pattern? ')' 
;
open_sequence_pattern:
| maybe_star_pattern ',' maybe_sequence_pattern?
;
maybe_sequence_pattern:
| ','.maybe_star_pattern+ ','?
;
maybe_star_pattern:
| star_pattern
| pattern
;
star_pattern:
| '*' pattern_capture_target
| '*' wildcard_pattern
;
mapping_pattern:
| '{' '}' 
| '{' double_star_pattern ','? '}' 
| '{' items_pattern ',' double_star_pattern ','? '}' 
| '{' items_pattern ','? '}' 
;
items_pattern:
| ','.key_value_pattern+
;
key_value_pattern:
| (literal_expr | attr) ':' pattern
;
double_star_pattern:
| '**' pattern_capture_target
;
class_pattern:
| name_or_attr '(' ')' 
| name_or_attr '(' positional_patterns ','? ')' 
| name_or_attr '(' keyword_patterns ','? ')' 
| name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')' 
;
positional_patterns:
| ','.pattern+
;
keyword_patterns:
| ','.keyword_pattern+
;
keyword_pattern:
| NAME '=' pattern
;
return_stmt:
| RETURN [star_expressions]
;
raise_stmt:
| RAISE expression [FROM expression ]
| RAISE
;
function_def:
| decorators function_def_raw
| function_def_raw
;
function_def_raw:
| DEF NAME '(' [params] ')' ['->' expression ] ':' [func_type_comment] BLOCK
| ASYNC DEF NAME '(' [params] ')' ['->' expression ] ':' [func_type_comment] BLOCK
;
func_type_comment:
| NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
| TYPE_COMMENT
;
params:
| parameters
;
parameters:
| slash_no_default param_no_default* param_with_default* [star_etc]
| slash_with_default param_with_default* [star_etc]
| param_no_default+ param_with_default* [star_etc]
| param_with_default+ [star_etc]
| star_etc
;
slash_no_default:
| param_no_default+ '/' ',' 
| param_no_default+ '/' &')' 
;
slash_with_default:
| param_no_default* param_with_default+ '/' ',' 
| param_no_default* param_with_default+ '/' &')' 
;
star_etc:
| '*' param_no_default param_maybe_default* [kwds]
| '*' ',' param_maybe_default+ [kwds]
| kwds
;
kwds: DOUBLESTAR param_no_default
;
param_no_default:
| param ',' TYPE_COMMENT?
| param TYPE_COMMENT? &')' 
;
param_with_default:
| param default ',' TYPE_COMMENT?
| param default TYPE_COMMENT? &')' 
;
param_maybe_default:
| param default? ',' TYPE_COMMENT?
| param default? TYPE_COMMENT? &')' 
;
param: NAME annotation?
;
annotation: ':' expression
;
default: '=' expression
;
decorators: ('@' named_expression NEWLINE )+
;
class_def:
| decorators class_def_raw
| class_def_raw
;
class_def_raw:
| 'class' NAME ['(' [arguments] ')' ] ':' BLOCK
;
BLOCK:
| NEWLINE INDENT statements DEDENT 
| simple_stmts
;
star_expressions:
| star_expression (',' star_expression )+ [',']
| star_expression ',' 
| star_expression
;
star_expression:
| '*' bitwise_or
| expression
;
star_named_expressions: ','.star_named_expression+ [',']
;
star_named_expression:
| '*' bitwise_or
| named_expression
;
assigment_expression:
| NAME ':=' ~ expression
;
named_expression:
| assigment_expression
| expression !':='
;
annotated_rhs: yield_expr | star_expressions
;
expressions:
| expression (',' expression )+ [',']
| expression ',' 
| expression
;
expression:
| disjunction 'if' disjunction ELSE expression
| disjunction
| lambdef
;
lambdef:
| LAMBDA [lambda_params] ':' expression
;
lambda_params:
| lambda_parameters
;
lambda_parameters:
| lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* [
| lambda_slash_with_default lambda_param_with_default* [lambda_star_etc]
| lambda_param_no_default+ lambda_param_with_default* [lambda_star_etc]
| lambda_param_with_default+ [lambda_star_etc]
| lambda_star_etc
;
lambda_slash_no_default:
| lambda_param_no_default+ '/' ',' 
| lambda_param_no_default+ '/' &':' 
;
lambda_slash_with_default:
| lambda_param_no_default* lambda_param_with_default+ '/' ',' 
| lambda_param_no_default* lambda_param_with_default+ '/' &':' 
;
lambda_star_etc:
| '*' lambda_param_no_default lambda_param_maybe_default* [lambda_kwds]
| '*' ',' lambda_param_maybe_default+ [lambda_kwds]
| lambda_kwds
;
lambda_kwds: '**' lambda_param_no_default
;
lambda_param_no_default:
| lambda_param ',' 
| lambda_param &':' 
;
lambda_param_with_default:
| lambda_param default ',' 
| lambda_param default &':' 
;
lambda_param_maybe_default:
| lambda_param default? ',' 
| lambda_param default? &':' 
;
lambda_param: NAME 
;
disjunction:
| conjunction (OR conjunction )+
| conjunction
;
conjunction:
| inversion ('and' inversion )+
| inversion
;
inversion:
| NOT inversion
| comparison
;
comparison:
| bitwise_or compare_op_bitwise_or_pair+
| bitwise_or
;
compare_op_bitwise_or_pair:
| eq_bitwise_or
| noteq_bitwise_or
| lte_bitwise_or
| lt_bitwise_or
| gte_bitwise_or
| gt_bitwise_or
| notin_bitwise_or
| in_bitwise_or
| isnot_bitwise_or
| is_bitwise_or
;
eq_bitwise_or: '==' bitwise_or
;
noteq_bitwise_or:
| ('!=' ) bitwise_or
;
lte_bitwise_or: '<=' bitwise_or
;
lt_bitwise_or: '<' bitwise_or
;
gte_bitwise_or: '>=' bitwise_or
;
gt_bitwise_or: '>' bitwise_or
;
notin_bitwise_or: NOT IN bitwise_or
;
in_bitwise_or: IN bitwise_or
;
isnot_bitwise_or: 'is' NOT bitwise_or
;
is_bitwise_or: 'is' bitwise_or
;
bitwise_or:
| bitwise_or '|' bitwise_xor
| bitwise_xor
;
bitwise_xor:
| bitwise_xor '^' bitwise_and
| bitwise_and
;
bitwise_and:
| bitwise_and '&' shift_expr
| shift_expr
;
shift_expr:
| shift_expr '<<' sum
| shift_expr '>>' sum
| sum
;
sum:
| sum '+' term
| sum '-' term
| term
;
term:
| term '*' factor
| term '/' factor
| term '//' factor
| term '%' factor
| term '@' factor
| factor
;
factor:
| '+' factor
| '-' factor
| '~' factor
| power
;
power:
| await_primary '**' factor
| await_primary
;
await_primary:
| AWAIT primary
| primary
;
primary:
| invalid_primary
| primary '.' NAME 
| primary genexp
| primary '(' [arguments] ')' 
| primary '[' slices ']' 
| atom
;
slices:
| slice !',' 
| ','.slice+ [',']
;
slice:
| [expression] ':' [expression] [':' [expression] ]
| named_expression
;
atom:
| NAME
| TRUE
| FALSE
| NONE
| strings
| NUMBER
| (tuple | group | genexp)
| (list | listcomp)
| (dict | set | dictcomp | setcomp)
| '...' 
;
strings: STRING+
;
list:
| '[' [star_named_expressions] ']' 
;
listcomp:
| '[' named_expression for_if_clauses ']' 
;
tuple:
| '(' [star_named_expression ',' [star_named_expressions] ] ')' 
;
group:
| '(' (yield_expr | named_expression) ')' 
;
genexp:
| '(' ( assigment_expression | expression !':=') for_if_clauses ')' 
;
set: '{' star_named_expressions '}' 
;
setcomp:
| '{' named_expression for_if_clauses '}' 
;
dict:
| '{' [double_starred_kvpairs] '}' 
| '{' invalid_double_starred_kvpairs '}'
;
dictcomp:
| '{' kvpair for_if_clauses '}' 
;
double_starred_kvpairs: ','.double_starred_kvpair+ [',']
;
double_starred_kvpair:
| '**' bitwise_or
| kvpair
;
kvpair: expression ':' expression
;
for_if_clauses:
| for_if_clause+
;
for_if_clause:
| ASYNC FOR star_targets IN ~ disjunction ('if' disjunction )*
| FOR star_targets IN ~ disjunction ('if' disjunction )*
;
yield_expr:
| 'yield' FROM expression
| 'yield' [star_expressions]
;
arguments:
| args [','] &')' 
;
args:
| ','.(starred_expression | ( assigment_expression | expression !':=') !'=')+ [
| kwargs
;
kwargs:
| ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
| ','.kwarg_or_starred+
| ','.kwarg_or_double_starred+
;
starred_expression:
| '*' expression
;
kwarg_or_starred:
| NAME '=' expression
| starred_expression
;
kwarg_or_double_starred:
| NAME '=' expression
| '**' expression
;
star_targets:
| star_target !',' 
| star_target (',' star_target )* [',']
;
star_targets_list_seq: ','.star_target+ [',']
;
star_targets_tuple_seq:
| star_target (',' star_target )+ [',']
| star_target ',' 
;
star_target:
| '*' (!'*' star_target)
| target_with_star_atom
;
target_with_star_atom:
| t_primary '.' NAME !t_lookahead
| t_primary '[' slices ']' !t_lookahead
| star_atom
;
star_atom:
| NAME 
| '(' target_with_star_atom ')' 
| '(' [star_targets_tuple_seq] ')' 
| '[' [star_targets_list_seq] ']' 
;
single_target:
| single_subscript_attribute_target
| NAME 
| '(' single_target ')' 
;
single_subscript_attribute_target:
| t_primary '.' NAME !t_lookahead
| t_primary '[' slices ']' !t_lookahead
;
del_targets: ','.del_target+ [',']
;
del_target:
| t_primary '.' NAME !t_lookahead
| t_primary '[' slices ']' !t_lookahead
| del_t_atom
;
del_t_atom:
| NAME 
| '(' del_target ')' 
| '(' [del_targets] ')' 
| '[' [del_targets] ']' 
;
t_primary:
| t_primary '.' NAME &t_lookahead
| t_primary '[' slices ']' &t_lookahead
| t_primary genexp &t_lookahead
| t_primary '(' [arguments] ')' &t_lookahead
| atom &t_lookahead
;
t_lookahead: '(' | '[' | '.'
;

%%

  private void yyerror(String msg) {
    System.out.println("ERROR: " + msg);
    System.exit(1);
  }



  public static void main(String[] args) {
    Python python = new Python();
    python.nextChar(); // prime the character input stream
    python.yylex();    // prime the token input stream
    python.parse();    // parse the input
  }